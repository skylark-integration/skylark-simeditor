{"version":3,"sources":["Indentation.js"],"names":["define","$","extend","Module","Indentation","inherit","pluginName","prototype","opts","tabIndent","_init","this","editor","_module","keystroke","add","_this","e","codeButton","toolbar","findButton","active","indent","shiftKey","isBackward","$blockNodes","nodes","result","selection","startNodes","endNodes","blockNodes","each","i","node","include","j","k","len","n","length","contains","splice","push","blockEl","r","outdentBlock","indentBlock","$blockEl","$childList","$nextTd","$nextTr","$parentLi","$pre","$td","$tr","marginLeft","tagName","is","containerNode","closest","indentText","range","prev","save","parent","children","append","appendTo","restore","parseInt","css","Math","round","indentWidth","next","find","setRangeAtEndOf","text","textNode","toString","replace","document","createTextNode","deleteContents","insertNode","selectNode","setRangeAfter","$parent","$prevTd","$prevTr","outdentText","createRange","setStartBefore","setEndBefore","before","extractContents","insertBefore","after","contents","remove","nextAll","insertAfter","max"],"mappings":"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","file":"../Indentation.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n  \"./_extend\",\r\n  \"./Module\"\r\n],function($,extend,Module){ \r\n\r\n  var Indentation = Module.inherit({\r\n\r\n  });\r\n\r\n\r\n  Indentation.pluginName = 'Indentation';\r\n\r\n  Indentation.prototype.opts = {\r\n    tabIndent: true\r\n  };\r\n\r\n  Indentation.prototype._init = function() {\r\n    this.editor = this._module;\r\n    return this.editor.keystroke.add('tab', '*', (function(_this) {\r\n      return function(e) {\r\n        var codeButton;\r\n        codeButton = _this.editor.toolbar.findButton('code');\r\n        if (!(_this.opts.tabIndent || (codeButton && codeButton.active))) {\r\n          return;\r\n        }\r\n        return _this.indent(e.shiftKey);\r\n      };\r\n    })(this));\r\n  };\r\n\r\n  Indentation.prototype.indent = function(isBackward) {\r\n    var $blockNodes, $endNodes, $startNodes, nodes, result;\r\n    $startNodes = this.editor.selection.startNodes();\r\n    $endNodes = this.editor.selection.endNodes();\r\n    $blockNodes = this.editor.selection.blockNodes();\r\n    nodes = [];\r\n    $blockNodes = $blockNodes.each(function(i, node) {\r\n      var include, j, k, len, n;\r\n      include = true;\r\n      for (j = k = 0, len = nodes.length; k < len; j = ++k) {\r\n        n = nodes[j];\r\n        if ($.contains(node, n)) {\r\n          include = false;\r\n          break;\r\n        } else if ($.contains(n, node)) {\r\n          nodes.splice(j, 1, node);\r\n          include = false;\r\n          break;\r\n        }\r\n      }\r\n      if (include) {\r\n        return nodes.push(node);\r\n      }\r\n    });\r\n    $blockNodes = $(nodes);\r\n    result = false;\r\n    $blockNodes.each((function(_this) {\r\n      return function(i, blockEl) {\r\n        var r;\r\n        r = isBackward ? _this.outdentBlock(blockEl) : _this.indentBlock(blockEl);\r\n        if (r) {\r\n          return result = r;\r\n        }\r\n      };\r\n    })(this));\r\n    return result;\r\n  };\r\n\r\n  Indentation.prototype.indentBlock = function(blockEl) {\r\n    var $blockEl, $childList, $nextTd, $nextTr, $parentLi, $pre, $td, $tr, marginLeft, tagName;\r\n    $blockEl = $(blockEl);\r\n    if (!$blockEl.length) {\r\n      return;\r\n    }\r\n    if ($blockEl.is('pre')) {\r\n      $pre = this.editor.selection.containerNode();\r\n      if (!($pre.is($blockEl) || $pre.closest('pre').is($blockEl))) {\r\n        return;\r\n      }\r\n      this.indentText(this.editor.selection.range());\r\n    } else if ($blockEl.is('li')) {\r\n      $parentLi = $blockEl.prev('li');\r\n      if ($parentLi.length < 1) {\r\n        return;\r\n      }\r\n      this.editor.selection.save();\r\n      tagName = $blockEl.parent()[0].tagName;\r\n      $childList = $parentLi.children('ul, ol');\r\n      if ($childList.length > 0) {\r\n        $childList.append($blockEl);\r\n      } else {\r\n        $('<' + tagName + '/>').append($blockEl).appendTo($parentLi);\r\n      }\r\n      this.editor.selection.restore();\r\n    } else if ($blockEl.is('p, h1, h2, h3, h4')) {\r\n      marginLeft = parseInt($blockEl.css('margin-left')) || 0;\r\n      marginLeft = (Math.round(marginLeft / this.opts.indentWidth) + 1) * this.opts.indentWidth;\r\n      $blockEl.css('margin-left', marginLeft);\r\n    } else if ($blockEl.is('table') || $blockEl.is('.simditor-table')) {\r\n      $td = this.editor.selection.containerNode().closest('td, th');\r\n      $nextTd = $td.next('td, th');\r\n      if (!($nextTd.length > 0)) {\r\n        $tr = $td.parent('tr');\r\n        $nextTr = $tr.next('tr');\r\n        if ($nextTr.length < 1 && $tr.parent().is('thead')) {\r\n          $nextTr = $tr.parent('thead').next('tbody').find('tr:first');\r\n        }\r\n        $nextTd = $nextTr.find('td:first, th:first');\r\n      }\r\n      if (!($td.length > 0 && $nextTd.length > 0)) {\r\n        return;\r\n      }\r\n      this.editor.selection.setRangeAtEndOf($nextTd);\r\n    } else {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  Indentation.prototype.indentText = function(range) {\r\n    var text, textNode;\r\n    text = range.toString().replace(/^(?=.+)/mg, '\\u00A0\\u00A0');\r\n    textNode = document.createTextNode(text || '\\u00A0\\u00A0');\r\n    range.deleteContents();\r\n    range.insertNode(textNode);\r\n    if (text) {\r\n      range.selectNode(textNode);\r\n      return this.editor.selection.range(range);\r\n    } else {\r\n      return this.editor.selection.setRangeAfter(textNode);\r\n    }\r\n  };\r\n\r\n  Indentation.prototype.outdentBlock = function(blockEl) {\r\n    var $blockEl, $parent, $parentLi, $pre, $prevTd, $prevTr, $td, $tr, marginLeft, range;\r\n    $blockEl = $(blockEl);\r\n    if (!($blockEl && $blockEl.length > 0)) {\r\n      return;\r\n    }\r\n    if ($blockEl.is('pre')) {\r\n      $pre = this.editor.selection.containerNode();\r\n      if (!($pre.is($blockEl) || $pre.closest('pre').is($blockEl))) {\r\n        return;\r\n      }\r\n      this.outdentText(range);\r\n    } else if ($blockEl.is('li')) {\r\n      $parent = $blockEl.parent();\r\n      $parentLi = $parent.parent('li');\r\n      this.editor.selection.save();\r\n      if ($parentLi.length < 1) {\r\n        range = document.createRange();\r\n        range.setStartBefore($parent[0]);\r\n        range.setEndBefore($blockEl[0]);\r\n        $parent.before(range.extractContents());\r\n        $('<p/>').insertBefore($parent).after($blockEl.children('ul, ol')).append($blockEl.contents());\r\n        $blockEl.remove();\r\n      } else {\r\n        if ($blockEl.next('li').length > 0) {\r\n          $('<' + $parent[0].tagName + '/>').append($blockEl.nextAll('li')).appendTo($blockEl);\r\n        }\r\n        $blockEl.insertAfter($parentLi);\r\n        if ($parent.children('li').length < 1) {\r\n          $parent.remove();\r\n        }\r\n      }\r\n      this.editor.selection.restore();\r\n    } else if ($blockEl.is('p, h1, h2, h3, h4')) {\r\n      marginLeft = parseInt($blockEl.css('margin-left')) || 0;\r\n      marginLeft = Math.max(Math.round(marginLeft / this.opts.indentWidth) - 1, 0) * this.opts.indentWidth;\r\n      $blockEl.css('margin-left', marginLeft === 0 ? '' : marginLeft);\r\n    } else if ($blockEl.is('table') || $blockEl.is('.simditor-table')) {\r\n      $td = this.editor.selection.containerNode().closest('td, th');\r\n      $prevTd = $td.prev('td, th');\r\n      if (!($prevTd.length > 0)) {\r\n        $tr = $td.parent('tr');\r\n        $prevTr = $tr.prev('tr');\r\n        if ($prevTr.length < 1 && $tr.parent().is('tbody')) {\r\n          $prevTr = $tr.parent('tbody').prev('thead').find('tr:first');\r\n        }\r\n        $prevTd = $prevTr.find('td:last, th:last');\r\n      }\r\n      if (!($td.length > 0 && $prevTd.length > 0)) {\r\n        return;\r\n      }\r\n      this.editor.selection.setRangeAtEndOf($prevTd);\r\n    } else {\r\n      return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  Indentation.prototype.outdentText = function(range) {};\r\n\r\n  return Indentation;\r\n\r\n});\r\n"]}