{"version":3,"sources":["buttons/CodeButton.js"],"names":["define","$","Toolbar","Simditor","Button","CodePopover","CodeButton","inherit","prototype","name","icon","htmlTag","disableTag","_init","_this","call","this","editor","on","e","$el","find","each","i","pre","decorate","undecorate","render","args","arguments","length","Array","slice","apply","popover","button","_checkMode","range","selection","cloneContents","util","blockNodes","join","collapsed","startNodes","filter","inlineMode","_status","active","show","node","hide","$pre","$code","lang","ref","ref1","attr","match","contents","unwrap","addClass","wrapInner","removeAttr","command","_inlineCommand","_blockCommand","$rootNodes","clearCache","nodeCache","resultNodes","rootNodes","insertBefore","text","formatter","clearHtml","push","$node","$p","is","append","html","replace","replaceAll","isDecoratedNode","setRangeAtEndOf","last","trigger","$contents","selectNodeContents","save","restore","extractContents","insertNode","addButton"],"mappings":"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","file":"../../buttons/CodeButton.js","sourcesContent":["define([\r\n  \"skylark-utils-dom/query\",\r\n  \"../Toolbar\",\r\n  \"../Simditor\",\r\n  \"../Button\",\r\n  \"./CodePopover\"\r\n],function($,Toolbar,Simditor,Button,CodePopover){ \r\n  \r\n\r\n   var CodeButton = Button.inherit({\r\n\r\n   });\r\n\r\n\r\n\r\n  CodeButton.prototype.name = 'code';\r\n\r\n  CodeButton.prototype.icon = 'code';\r\n\r\n  CodeButton.prototype.htmlTag = 'pre';\r\n\r\n  CodeButton.prototype.disableTag = 'ul, ol, table';\r\n\r\n  CodeButton.prototype._init = function() {\r\n    Button.prototype._init.call(this);\r\n    this.editor.on('decorate', (function(_this) {\r\n      return function(e, $el) {\r\n        return $el.find('pre').each(function(i, pre) {\r\n          return _this.decorate($(pre));\r\n        });\r\n      };\r\n    })(this));\r\n    return this.editor.on('undecorate', (function(_this) {\r\n      return function(e, $el) {\r\n        return $el.find('pre').each(function(i, pre) {\r\n          return _this.undecorate($(pre));\r\n        });\r\n      };\r\n    })(this));\r\n  };\r\n\r\n  CodeButton.prototype.render = function() {\r\n    var args;\r\n    args = 1 <= arguments.length ? Array.prototype.slice.call(arguments, 0) : [];\r\n    Button.prototype.render.apply(this, args);\r\n    return this.popover = new CodePopover({\r\n      button: this\r\n    });\r\n  };\r\n\r\n  CodeButton.prototype._checkMode = function() {\r\n    var $blockNodes, range;\r\n    range = this.editor.selection.range();\r\n    if (($blockNodes = $(range.cloneContents()).find(this.editor.util.blockNodes.join(','))) > 0 || (range.collapsed && this.editor.selection.startNodes().filter('code').length === 0)) {\r\n      this.inlineMode = false;\r\n      return this.htmlTag = 'pre';\r\n    } else {\r\n      this.inlineMode = true;\r\n      return this.htmlTag = 'code';\r\n    }\r\n  };\r\n\r\n  CodeButton.prototype._status = function() {\r\n    this._checkMode();\r\n    Button.prototype._status.call(this);\r\n    if (this.inlineMode) {\r\n      return;\r\n    }\r\n    if (this.active) {\r\n      return this.popover.show(this.node);\r\n    } else {\r\n      return this.popover.hide();\r\n    }\r\n  };\r\n\r\n  CodeButton.prototype.decorate = function($pre) {\r\n    var $code, lang, ref, ref1;\r\n    $code = $pre.find('> code');\r\n    if ($code.length > 0) {\r\n      lang = (ref = $code.attr('class')) != null ? (ref1 = ref.match(/lang-(\\S+)/)) != null ? ref1[1] : void 0 : void 0;\r\n      $code.contents().unwrap();\r\n      if (lang) {\r\n        return $pre.attr('data-lang', lang);\r\n      }\r\n    }\r\n  };\r\n\r\n  CodeButton.prototype.undecorate = function($pre) {\r\n    var $code, lang;\r\n    lang = $pre.attr('data-lang');\r\n    $code = $('<code/>');\r\n    if (lang && lang !== -1) {\r\n      $code.addClass('lang-' + lang);\r\n    }\r\n    return $pre.wrapInner($code).removeAttr('data-lang');\r\n  };\r\n\r\n  CodeButton.prototype.command = function() {\r\n    if (this.inlineMode) {\r\n      return this._inlineCommand();\r\n    } else {\r\n      return this._blockCommand();\r\n    }\r\n  };\r\n\r\n  CodeButton.prototype._blockCommand = function() {\r\n    var $rootNodes, clearCache, nodeCache, resultNodes;\r\n    $rootNodes = this.editor.selection.rootNodes();\r\n    nodeCache = [];\r\n    resultNodes = [];\r\n    clearCache = (function(_this) {\r\n      return function() {\r\n        var $pre;\r\n        if (!(nodeCache.length > 0)) {\r\n          return;\r\n        }\r\n        $pre = $(\"<\" + _this.htmlTag + \"/>\").insertBefore(nodeCache[0]).text(_this.editor.formatter.clearHtml(nodeCache));\r\n        resultNodes.push($pre[0]);\r\n        return nodeCache.length = 0;\r\n      };\r\n    })(this);\r\n    $rootNodes.each((function(_this) {\r\n      return function(i, node) {\r\n        var $node, $p;\r\n        $node = $(node);\r\n        if ($node.is(_this.htmlTag)) {\r\n          clearCache();\r\n          $p = $('<p/>').append($node.html().replace('\\n', '<br/>')).replaceAll($node);\r\n          return resultNodes.push($p[0]);\r\n        } else if ($node.is(_this.disableTag) || _this.editor.util.isDecoratedNode($node) || $node.is('blockquote')) {\r\n          return clearCache();\r\n        } else {\r\n          return nodeCache.push(node);\r\n        }\r\n      };\r\n    })(this));\r\n    clearCache();\r\n    this.editor.selection.setRangeAtEndOf($(resultNodes).last());\r\n    return this.editor.trigger('valuechanged');\r\n  };\r\n\r\n  CodeButton.prototype._inlineCommand = function() {\r\n    var $code, $contents, range;\r\n    range = this.editor.selection.range();\r\n    if (this.active) {\r\n      range.selectNodeContents(this.node[0]);\r\n      this.editor.selection.save(range);\r\n      this.node.contents().unwrap();\r\n      this.editor.selection.restore();\r\n    } else {\r\n      $contents = $(range.extractContents());\r\n      $code = $(\"<\" + this.htmlTag + \"/>\").append($contents.contents());\r\n      range.insertNode($code[0]);\r\n      range.selectNodeContents($code[0]);\r\n      this.editor.selection.range(range);\r\n    }\r\n    return this.editor.trigger('valuechanged');\r\n  };\r\n\r\n  Simditor.Toolbar.addButton(CodeButton);    \r\n\r\n  return CodeButton;\r\n\r\n});"]}