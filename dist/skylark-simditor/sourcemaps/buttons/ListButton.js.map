{"version":3,"sources":["buttons/ListButton.js"],"names":["define","noder","$","Toolbar","Simditor","Button","ListButton","inherit","prototype","type","disableTag","command","param","$list","$rootNodes","anotherType","_this","this","editor","editable","selection","blockNodes","save","each","i","node","$node","is","util","isDecoratedNode","contains","document","children","li","insertAfter","append","html","phBr","insertBefore","remove","contents","replaceAll","prev","appendTo","find","restore","trigger"],"mappings":";;;;;;;AAAAA,QACE,0BACA,0BACA,aACA,cACA,aACA,SAASC,EAAMC,EAAEC,EAAQC,EAASC,GAClC,IAAIC,EAAaD,EAAOE,YA8CtB,OAzCAD,EAAWE,UAAUC,KAAO,GAE5BH,EAAWE,UAAUE,WAAa,aAElCJ,EAAWE,UAAUG,QAAU,SAASC,GACtC,IAAIC,EAAOC,EAAYC,EAKGC,EA4B1B,OAhCAF,EAAaG,KAAKC,OAAOC,SAASC,UAAUC,aAC5CN,EAA4B,OAAdE,KAAKR,KAAgB,KAAO,KAC1CQ,KAAKC,OAAOC,SAASC,UAAUE,OAC/BT,EAAQ,KACRC,EAAWS,MAAeP,EA0BvBC,KAzBM,SAASO,EAAGC,GACjB,IAAIC,EAEJ,MADAA,EAAQxB,EAAEuB,IACAE,GAAG,mBAAqBD,EAAMC,GAAGX,EAAMN,aAAeM,EAAME,OAAOC,SAASS,KAAKC,gBAAgBH,KAAWzB,EAAM6B,SAASC,SAAUN,GAG/I,OAAIC,EAAMC,GAAGX,EAAMP,OACjBiB,EAAMM,SAAS,MAAMT,KAAK,SAASC,EAAGS,GAIpC,OAFM/B,EAAE+B,GACSD,SAAS,UAAUE,YAAYR,GACzCxB,EAAE,QAAQiC,OAAOjC,EAAE+B,GAAIG,QAAUpB,EAAME,OAAOC,SAASS,KAAKS,MAAMC,aAAaZ,KAEjFA,EAAMa,UACJb,EAAMC,GAAGZ,GACXb,EAAE,IAAMc,EAAMP,KAAO,MAAM0B,OAAOT,EAAMc,YAAYC,WAAWf,GAC7Db,GAASa,EAAMgB,OAAOf,GAAGd,IAClCX,EAAE,SAASiC,OAAOT,EAAMU,QAAUpB,EAAME,OAAOC,SAASS,KAAKS,MAAMM,SAAS9B,GACrEa,EAAMa,YAEb1B,EAAQX,EAAE,IAAMc,EAAMP,KAAO,eAAiBO,EAAMP,KAAO,MACrDmC,KAAK,MAAMT,OAAOT,EAAMU,QAAUpB,EAAME,OAAOC,SAASS,KAAKS,MAC5DxB,EAAM4B,WAAWf,OAI9BT,KAAKC,OAAOC,SAASC,UAAUyB,UACxB5B,KAAKC,OAAO4B,QAAQ,iBAGtBxC","file":"../../buttons/ListButton.js","sourcesContent":["define([\r\n  \"skylark-utils-dom/noder\",\r\n  \"skylark-utils-dom/query\",\r\n  \"../Toolbar\",\r\n  \"../Simditor\",\r\n  \"../Button\"\r\n],function(noder,$,Toolbar,Simditor,Button){ \r\n  var ListButton = Button.inherit({\r\n\r\n   });\r\n\r\n\r\n    ListButton.prototype.type = '';\r\n\r\n    ListButton.prototype.disableTag = 'pre, table';\r\n\r\n    ListButton.prototype.command = function(param) {\r\n      var $list, $rootNodes, anotherType;\r\n      $rootNodes = this.editor.editable.selection.blockNodes();\r\n      anotherType = this.type === 'ul' ? 'ol' : 'ul';\r\n      this.editor.editable.selection.save();\r\n      $list = null;\r\n      $rootNodes.each((function(_this) {\r\n        return function(i, node) {\r\n          var $node;\r\n          $node = $(node);\r\n          if ($node.is('blockquote, li') || $node.is(_this.disableTag) || _this.editor.editable.util.isDecoratedNode($node) || !noder.contains(document, node)) {\r\n            return;\r\n          }\r\n          if ($node.is(_this.type)) {\r\n            $node.children('li').each(function(i, li) {\r\n              var $childList, $li;\r\n              $li = $(li);\r\n              $childList = $li.children('ul, ol').insertAfter($node);\r\n              return $('<p/>').append($(li).html() || _this.editor.editable.util.phBr).insertBefore($node);\r\n            });\r\n            return $node.remove();\r\n          } else if ($node.is(anotherType)) {\r\n            return $('<' + _this.type + '/>').append($node.contents()).replaceAll($node);\r\n          } else if ($list && $node.prev().is($list)) {\r\n            $('<li/>').append($node.html() || _this.editor.editable.util.phBr).appendTo($list);\r\n            return $node.remove();\r\n          } else {\r\n            $list = $(\"<\" + _this.type + \"><li></li></\" + _this.type + \">\");\r\n            $list.find('li').append($node.html() || _this.editor.editable.util.phBr);\r\n            return $list.replaceAll($node);\r\n          }\r\n        };\r\n      })(this));\r\n      this.editor.editable.selection.restore();\r\n      return this.editor.trigger('valuechanged');\r\n    };\r\n\r\n    return ListButton;\r\n\t\r\n});"]}