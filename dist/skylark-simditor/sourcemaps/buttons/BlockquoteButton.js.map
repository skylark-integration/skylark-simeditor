{"version":3,"sources":["buttons/BlockquoteButton.js"],"names":["define","$","Toolbar","Simditor","Button","BlockquoteButton","inherit","prototype","name","icon","htmlTag","disableTag","command","$rootNodes","clearCache","nodeCache","_this","this","editor","editable","selection","rootNodes","filter","i","node","parent","is","save","length","insertBefore","append","each","$node","body","children","unwrap","util","isDecoratedNode","push","restore","trigger","addButton"],"mappings":";;;;;;;AAAAA,QACE,0BACA,aACA,cACA,aACA,SAASC,EAAEC,EAAQC,EAASC,GAC3B,IAAIC,EAAmBD,EAAOE,YAsD/B,OAhDAD,EAAiBE,UAAUC,KAAO,aAElCH,EAAiBE,UAAUE,KAAO,aAElCJ,EAAiBE,UAAUG,QAAU,aAErCL,EAAiBE,UAAUI,WAAa,aAExCN,EAAiBE,UAAUK,QAAU,WACnC,IAAIC,EAAYC,EAAYC,EAOLC,EA2BvB,OAhCAH,GADAA,EAAaI,KAAKC,OAAOC,SAASC,UAAUC,aACpBC,OAAO,SAASC,EAAGC,GACzC,OAAQvB,EAAEuB,GAAMC,SAASC,GAAG,gBAE9BT,KAAKC,OAAOC,SAASC,UAAUO,OAC/BZ,KACuBC,EAOpBC,KAPHH,EACS,WACL,GAAIC,EAAUa,OAAS,EAErB,OADA3B,EAAE,IAAMe,EAAMN,QAAU,MAAMmB,aAAad,EAAU,IAAIe,OAAOf,GACzDA,EAAUa,OAAS,GAIhCf,EAAWkB,KAAK,SAAUf,GACxB,OAAO,SAASO,EAAGC,GACjB,IAAIQ,EAEJ,IADAA,EAAQ/B,EAAEuB,IACCC,SAASC,GAAGV,EAAME,OAAOe,MAGpC,OAAID,EAAMN,GAAGV,EAAMN,UACjBI,IACOkB,EAAME,WAAWC,UACfH,EAAMN,GAAGV,EAAML,aAAeK,EAAME,OAAOC,SAASiB,KAAKC,gBAAgBL,GAC3ElB,IAEAC,EAAUuB,KAAKd,IAbZ,CAgBbP,OACHH,IACAG,KAAKC,OAAOC,SAASC,UAAUmB,UACxBtB,KAAKC,OAAOsB,QAAQ,iBAG7BrC,EAASD,QAAQuC,UAAUpC,GAEpBA","file":"../../buttons/BlockquoteButton.js","sourcesContent":["define([\r\n  \"skylark-utils-dom/query\",\r\n  \"../Toolbar\",\r\n  \"../Simditor\",\r\n  \"../Button\"\r\n],function($,Toolbar,Simditor,Button){ \r\n   var BlockquoteButton = Button.inherit({\r\n\r\n   });\r\n\r\n\r\n\r\n  BlockquoteButton.prototype.name = 'blockquote';\r\n\r\n  BlockquoteButton.prototype.icon = 'quote-left';\r\n\r\n  BlockquoteButton.prototype.htmlTag = 'blockquote';\r\n\r\n  BlockquoteButton.prototype.disableTag = 'pre, table';\r\n\r\n  BlockquoteButton.prototype.command = function() {\r\n    var $rootNodes, clearCache, nodeCache;\r\n    $rootNodes = this.editor.editable.selection.rootNodes();\r\n    $rootNodes = $rootNodes.filter(function(i, node) {\r\n      return !$(node).parent().is('blockquote');\r\n    });\r\n    this.editor.editable.selection.save();\r\n    nodeCache = [];\r\n    clearCache = (function(_this) {\r\n      return function() {\r\n        if (nodeCache.length > 0) {\r\n          $(\"<\" + _this.htmlTag + \"/>\").insertBefore(nodeCache[0]).append(nodeCache);\r\n          return nodeCache.length = 0;\r\n        }\r\n      };\r\n    })(this);\r\n    $rootNodes.each((function(_this) {\r\n      return function(i, node) {\r\n        var $node;\r\n        $node = $(node);\r\n        if (!$node.parent().is(_this.editor.body)) {\r\n          return;\r\n        }\r\n        if ($node.is(_this.htmlTag)) {\r\n          clearCache();\r\n          return $node.children().unwrap();\r\n        } else if ($node.is(_this.disableTag) || _this.editor.editable.util.isDecoratedNode($node)) {\r\n          return clearCache();\r\n        } else {\r\n          return nodeCache.push(node);\r\n        }\r\n      };\r\n    })(this));\r\n    clearCache();\r\n    this.editor.editable.selection.restore();\r\n    return this.editor.trigger('valuechanged');\r\n  };\r\n\r\n  Simditor.Toolbar.addButton(BlockquoteButton); \r\n\r\n  return BlockquoteButton;\r\n\r\n});"]}