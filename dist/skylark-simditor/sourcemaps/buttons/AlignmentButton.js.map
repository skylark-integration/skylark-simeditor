{"version":3,"sources":["buttons/AlignmentButton.js"],"names":["define","$","Toolbar","Simditor","Button","AlignmentButton","inherit","prototype","name","icon","htmlTag","_init","this","menu","text","_t","param","call","setActive","active","align","el","removeClass","addClass","setIcon","menuEl","find","show","end","hide","_status","nodes","editor","editable","selection","filter","length","setDisabled","first","css","command","Error","text-align","trigger","inputManager","throttledSelectionChanged","addButton"],"mappings":";;;;;;;AAAAA,QACE,0BACA,aACA,cACA,aACA,SAASC,EAAEC,EAAQC,EAASC,GAC3B,IAAIC,EAAkBD,EAAOE,YA6E9B,OAxEAD,EAAgBE,UAAUC,KAAO,YAEjCH,EAAgBE,UAAUE,KAAO,aAEjCJ,EAAgBE,UAAUG,QAAU,4BAEpCL,EAAgBE,UAAUI,MAAQ,WAmBhC,OAlBAC,KAAKC,OAEDL,KAAM,OACNM,KAAMF,KAAKG,GAAG,aACdN,KAAM,aACNO,MAAO,SAEPR,KAAM,SACNM,KAAMF,KAAKG,GAAG,eACdN,KAAM,eACNO,MAAO,WAEPR,KAAM,QACNM,KAAMF,KAAKG,GAAG,cACdN,KAAM,cACNO,MAAO,UAGJZ,EAAOG,UAAUI,MAAMM,KAAKL,OAGrCP,EAAgBE,UAAUW,UAAY,SAASC,EAAQC,GAiBrD,OAhBa,MAATA,IACFA,EAAQ,QAEI,SAAVA,GAA8B,WAAVA,GAAgC,UAAVA,IAC5CA,EAAQ,QAEI,SAAVA,EACFhB,EAAOG,UAAUW,UAAUD,KAAKL,MAAM,GAEtCR,EAAOG,UAAUW,UAAUD,KAAKL,KAAMO,GAExCP,KAAKS,GAAGC,YAAY,uCAChBH,GACFP,KAAKS,GAAGE,SAAS,SAAWH,GAE9BR,KAAKY,QAAQ,SAAWJ,GACjBR,KAAKa,OAAOC,KAAK,cAAcC,OAAOC,MAAMF,KAAK,cAAgBN,GAAOS,QAGjFxB,EAAgBE,UAAUuB,QAAU,WAElC,OADAlB,KAAKmB,MAAQnB,KAAKoB,OAAOC,SAASC,UAAUH,QAAQI,OAAOvB,KAAKF,SAC5DE,KAAKmB,MAAMK,OAAS,GACtBxB,KAAKyB,aAAY,GACVzB,KAAKM,WAAU,KAEtBN,KAAKyB,aAAY,GACVzB,KAAKM,WAAU,EAAMN,KAAKmB,MAAMO,QAAQC,IAAI,iBAIvDlC,EAAgBE,UAAUiC,QAAU,SAASpB,GAC3C,GAAc,SAAVA,GAA8B,WAAVA,GAAgC,UAAVA,EAC5C,MAAM,IAAIqB,MAAM,4CAA8CrB,GAMhE,OAJAR,KAAKmB,MAAMQ,KACTG,aAAwB,SAAVtB,EAAmB,GAAKA,IAExCR,KAAKoB,OAAOW,QAAQ,gBACb/B,KAAKoB,OAAOC,SAASW,aAAaC,6BAG3C1C,EAASD,QAAQ4C,UAAUzC,GAEpBA","file":"../../buttons/AlignmentButton.js","sourcesContent":["define([\r\n  \"skylark-utils-dom/query\",\r\n  \"../Toolbar\",\r\n  \"../Simditor\",\r\n  \"../Button\"\r\n],function($,Toolbar,Simditor,Button){ \r\n   var AlignmentButton = Button.inherit({\r\n\r\n    });\r\n\r\n\r\n  AlignmentButton.prototype.name = \"alignment\";\r\n\r\n  AlignmentButton.prototype.icon = 'align-left';\r\n\r\n  AlignmentButton.prototype.htmlTag = 'p, h1, h2, h3, h4, td, th';\r\n\r\n  AlignmentButton.prototype._init = function() {\r\n    this.menu = [\r\n      {\r\n        name: 'left',\r\n        text: this._t('alignLeft'),\r\n        icon: 'align-left',\r\n        param: 'left'\r\n      }, {\r\n        name: 'center',\r\n        text: this._t('alignCenter'),\r\n        icon: 'align-center',\r\n        param: 'center'\r\n      }, {\r\n        name: 'right',\r\n        text: this._t('alignRight'),\r\n        icon: 'align-right',\r\n        param: 'right'\r\n      }\r\n    ];\r\n    return Button.prototype._init.call(this);\r\n  };\r\n\r\n  AlignmentButton.prototype.setActive = function(active, align) {\r\n    if (align == null) {\r\n      align = 'left';\r\n    }\r\n    if (align !== 'left' && align !== 'center' && align !== 'right') {\r\n      align = 'left';\r\n    }\r\n    if (align === 'left') {\r\n      Button.prototype.setActive.call(this, false);\r\n    } else {\r\n      Button.prototype.setActive.call(this, active);\r\n    }\r\n    this.el.removeClass('align-left align-center align-right');\r\n    if (active) {\r\n      this.el.addClass('align-' + align);\r\n    }\r\n    this.setIcon('align-' + align);\r\n    return this.menuEl.find('.menu-item').show().end().find('.menu-item-' + align).hide();\r\n  };\r\n\r\n  AlignmentButton.prototype._status = function() {\r\n    this.nodes = this.editor.editable.selection.nodes().filter(this.htmlTag);\r\n    if (this.nodes.length < 1) {\r\n      this.setDisabled(true);\r\n      return this.setActive(false);\r\n    } else {\r\n      this.setDisabled(false);\r\n      return this.setActive(true, this.nodes.first().css('text-align'));\r\n    }\r\n  };\r\n\r\n  AlignmentButton.prototype.command = function(align) {\r\n    if (align !== 'left' && align !== 'center' && align !== 'right') {\r\n      throw new Error(\"simditor alignment button: invalid align \" + align);\r\n    }\r\n    this.nodes.css({\r\n      'text-align': align === 'left' ? '' : align\r\n    });\r\n    this.editor.trigger('valuechanged');\r\n    return this.editor.editable.inputManager.throttledSelectionChanged();\r\n  };\r\n\r\n  Simditor.Toolbar.addButton(AlignmentButton);\r\n\r\n  return AlignmentButton;\r\n\r\n});"]}