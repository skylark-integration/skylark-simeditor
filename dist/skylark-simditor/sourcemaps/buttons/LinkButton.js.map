{"version":3,"sources":["buttons/LinkButton.js"],"names":["define","$","Toolbar","Simditor","Button","LinkPopover","LinkButton","inherit","prototype","name","icon","htmlTag","disableTag","render","args","arguments","length","Array","slice","call","apply","this","popover","button","_status","active","editor","selection","rangeAtEndOf","node","show","hide","command","$contents","$link","$newBlock","linkText","range","txtNode","_this","document","createTextNode","text","replaceWith","selectNode","extractContents","formatter","clearHtml","contents","href","target","_t","blockNodes","insertNode","append","selectNodeContents","one","urlEl","focus","select","textEl","trigger","addButton"],"mappings":";;;;;;;AAAAA,QACE,0BACA,aACA,cACA,YACA,iBACA,SAASC,EAAEC,EAAQC,EAASC,EAAOC,GAGnC,IAAIC,EAAaF,EAAOG,YAuExB,OAlEAD,EAAWE,UAAUC,KAAO,OAE5BH,EAAWE,UAAUE,KAAO,OAE5BJ,EAAWE,UAAUG,QAAU,IAE/BL,EAAWE,UAAUI,WAAa,MAElCN,EAAWE,UAAUK,OAAS,WAC5B,IAAIC,EAGJ,OAFAA,EAAO,GAAKC,UAAUC,OAASC,MAAMT,UAAUU,MAAMC,KAAKJ,UAAW,MACrEX,EAAOI,UAAUK,OAAOO,MAAMC,KAAMP,GAC7BO,KAAKC,QAAU,IAAIjB,GACxBkB,OAAQF,QAIZf,EAAWE,UAAUgB,QAAU,WAE7B,OADDpB,EAAOI,UAAUgB,QAAQL,KAAKE,MACzBA,KAAKI,SAAWJ,KAAKK,OAAOC,UAAUC,aAAaP,KAAKQ,MACnDR,KAAKC,QAAQQ,KAAKT,KAAKQ,MAEvBR,KAAKC,QAAQS,QAIxBzB,EAAWE,UAAUwB,QAAU,WAC7B,IAAIC,EAAWC,EAAOC,EAAWC,EAAUC,EAAOC,EAqBNC,EAa5C,OAjCAF,EAAQhB,KAAKK,OAAOC,UAAUU,QAC1BhB,KAAKI,QACPa,EAAUE,SAASC,eAAepB,KAAKQ,KAAKa,QAC5CrB,KAAKQ,KAAKc,YAAYL,GACtBD,EAAMO,WAAWN,KAEjBL,EAAYhC,EAAEoC,EAAMQ,mBACpBT,EAAWf,KAAKK,OAAOoB,UAAUC,UAAUd,EAAUe,YAAY,GACjEd,EAAQjC,EAAE,QACRgD,KAAM,GACNC,OAAQ,SACRR,KAAMN,GAAYf,KAAK8B,GAAG,cAExB9B,KAAKK,OAAOC,UAAUyB,aAAapC,OAAS,EAC9CqB,EAAMgB,WAAWnB,EAAM,KAEvBC,EAAYlC,EAAE,QAAQqD,OAAOpB,GAC7BG,EAAMgB,WAAWlB,EAAU,KAE7BE,EAAMkB,mBAAmBrB,EAAM,IAC/Bb,KAAKC,QAAQkC,IAAI,eAAyBjB,EAUvClB,KATM,WACL,OAAIe,GACFG,EAAMjB,QAAQmC,MAAMC,QACbnB,EAAMjB,QAAQmC,MAAM,GAAGE,WAE9BpB,EAAMjB,QAAQsC,OAAOF,QACdnB,EAAMjB,QAAQsC,OAAO,GAAGD,cAKvCtC,KAAKK,OAAOC,UAAUU,MAAMA,GACrBhB,KAAKK,OAAOmC,QAAQ,iBAG7B1D,EAASD,QAAQ4D,UAAUxD,GAEpBA","file":"../../buttons/LinkButton.js","sourcesContent":["define([\r\n  \"skylark-utils-dom/query\",\r\n  \"../Toolbar\",\r\n  \"../Simditor\",\r\n  \"../Button\",\r\n  \"./LinkPopover\"\r\n],function($,Toolbar,Simditor,Button,LinkPopover){ \r\n  \r\n\r\n  var LinkButton = Button.inherit({\r\n\r\n   });\r\n\r\n\r\n  LinkButton.prototype.name = 'link';\r\n\r\n  LinkButton.prototype.icon = 'link';\r\n\r\n  LinkButton.prototype.htmlTag = 'a';\r\n\r\n  LinkButton.prototype.disableTag = 'pre';\r\n\r\n  LinkButton.prototype.render = function() {\r\n    var args;\r\n    args = 1 <= arguments.length ? Array.prototype.slice.call(arguments, 0) : [];\r\n    Button.prototype.render.apply(this, args);\r\n    return this.popover = new LinkPopover({\r\n      button: this\r\n    });\r\n  };\r\n\r\n  LinkButton.prototype._status = function() {\r\n   Button.prototype._status.call(this);\r\n    if (this.active && !this.editor.selection.rangeAtEndOf(this.node)) {\r\n      return this.popover.show(this.node);\r\n    } else {\r\n      return this.popover.hide();\r\n    }\r\n  };\r\n\r\n  LinkButton.prototype.command = function() {\r\n    var $contents, $link, $newBlock, linkText, range, txtNode;\r\n    range = this.editor.selection.range();\r\n    if (this.active) {\r\n      txtNode = document.createTextNode(this.node.text());\r\n      this.node.replaceWith(txtNode);\r\n      range.selectNode(txtNode);\r\n    } else {\r\n      $contents = $(range.extractContents());\r\n      linkText = this.editor.formatter.clearHtml($contents.contents(), false);\r\n      $link = $('<a/>', {\r\n        href: '',\r\n        target: '_blank',\r\n        text: linkText || this._t('linkText')\r\n      });\r\n      if (this.editor.selection.blockNodes().length > 0) {\r\n        range.insertNode($link[0]);\r\n      } else {\r\n        $newBlock = $('<p/>').append($link);\r\n        range.insertNode($newBlock[0]);\r\n      }\r\n      range.selectNodeContents($link[0]);\r\n      this.popover.one('popovershow', (function(_this) {\r\n        return function() {\r\n          if (linkText) {\r\n            _this.popover.urlEl.focus();\r\n            return _this.popover.urlEl[0].select();\r\n          } else {\r\n            _this.popover.textEl.focus();\r\n            return _this.popover.textEl[0].select();\r\n          }\r\n        };\r\n      })(this));\r\n    }\r\n    this.editor.selection.range(range);\r\n    return this.editor.trigger('valuechanged');\r\n  };\r\n\r\n  Simditor.Toolbar.addButton(LinkButton);\r\n\r\n  return LinkButton;\r\n\r\n});"]}