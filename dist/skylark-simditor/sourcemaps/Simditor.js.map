{"version":3,"sources":["Simditor.js"],"names":["define","exports","module","__isValidToReturn","obj","Array","isArray","attr","__isEmptyObject","langx","$","editable","Toolbar","uploader","i18n","Simditor","Evented","inherit","init","opts","editor","uploadOpts","this","extend","textarea","placeholder","length","Error","data","destroy","id","count","_render","self","el","classPrefix","body","on","e","trigger","type","upload","toolbar","toolbarFloat","toolbarHidden","toolbarFloatOffset","_placeholder","setValue","val","trim","focus","prototype","triggerHandler","args","concat","apply","defaultImage","params","indentWidth","_tpl","key","ref","results","insertBefore","wrapper","find","placeholderEl","append","blur","push","name","value","insertAfter","children","util","isEmptyNode","parseInt","css","show","hide","hidePopover","getValue","each","i","popover","active","closest","off","selection","clear","inputManager","focused","removeData","remove","document","window"],"mappings":"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","file":"../Simditor.js","sourcesContent":["define([], function () {\n    'use strict';\n    var exports = {};\n    var module = { exports: {} };\n    define([\n        'skylark-langx/langx',\n        'skylark-utils-dom/query',\n        'skylark-ui-contents/editable',\n        './Toolbar',\n        './uploader',\n        './i18n'\n    ], function (langx, $, editable, Toolbar, uploader, i18n) {\n        var Simditor = langx.Evented.inherit({\n            init: function (opts) {\n                this.opts = langx.extend({}, this.opts, opts);\n                var e, editor, uploadOpts;\n                this.textarea = $(this.opts.textarea);\n                this.opts.placeholder = this.opts.placeholder || this.textarea.attr('placeholder');\n                if (!this.textarea.length) {\n                    throw new Error('simditor: param textarea is required.');\n                    return;\n                }\n                editor = this.textarea.data('simditor');\n                if (editor != null) {\n                    editor.destroy();\n                }\n                this.id = ++Simditor.count;\n                this._render();\n                var self = this;\n                this.editable = editable(this.el, {\n                    classPrefix: 'simditor-',\n                    textarea: this.textarea,\n                    body: this.body\n                });\n                this.editable.on('all', function (e, data) {\n                    return self.trigger(e.type, data);\n                });\n                if (this.opts.upload && uploader) {\n                    uploadOpts = typeof this.opts.upload === 'object' ? this.opts.upload : {};\n                    this.uploader = uploader(uploadOpts);\n                }\n                this.toolbar = new Toolbar(this, {\n                    toolbar: this.opts.toolbar,\n                    toolbarFloat: this.opts.toolbarFloat,\n                    toolbarHidden: this.opts.toolbarHidden,\n                    toolbarFloatOffset: this.opts.toolbarFloatOffset\n                });\n                if (this.opts.placeholder) {\n                    this.on('valuechanged', function () {\n                        return self._placeholder();\n                    });\n                }\n                this.setValue(this.textarea.val().trim() || '');\n                if (this.textarea.attr('autofocus')) {\n                    return self.focus();\n                }\n            }\n        });\n        Simditor.prototype.triggerHandler = Simditor.prototype.trigger = function (type, data) {\n            var args, ref;\n            args = [type];\n            if (data) {\n                args = args.concat(data);\n            }\n            langx.Evented.prototype.trigger.apply(this, args);\n            return this;\n        };\n        Simditor.count = 0;\n        Simditor.prototype.opts = {\n            textarea: null,\n            placeholder: '',\n            defaultImage: 'images/image.png',\n            params: {},\n            upload: false,\n            indentWidth: 40\n        };\n        Simditor.prototype._tpl = '<div class=\"simditor\">\\n  <div class=\"simditor-wrapper\">\\n    <div class=\"simditor-placeholder\"></div>\\n    <div class=\"simditor-body\" contenteditable=\"true\">\\n    </div>\\n  </div>\\n</div>';\n        Simditor.prototype._render = function () {\n            var key, ref, results, val;\n            this.el = $(this._tpl).insertBefore(this.textarea);\n            this.wrapper = this.el.find('.simditor-wrapper');\n            this.body = this.wrapper.find('.simditor-body');\n            this.placeholderEl = this.wrapper.find('.simditor-placeholder').append(this.opts.placeholder);\n            this.el.data('simditor', this);\n            this.wrapper.append(this.textarea);\n            this.textarea.data('simditor', this).blur();\n            this.body.attr('tabindex', this.textarea.attr('tabindex'));\n            if (this.opts.params) {\n                ref = this.opts.params;\n                results = [];\n                for (key in ref) {\n                    val = ref[key];\n                    results.push($('<input/>', {\n                        type: 'hidden',\n                        name: key,\n                        value: val\n                    }).insertAfter(this.textarea));\n                }\n                return results;\n            }\n        };\n        Simditor.prototype._placeholder = function () {\n            var children;\n            children = this.body.children();\n            if (children.length === 0 || children.length === 1 && this.util.isEmptyNode(children) && parseInt(children.css('margin-left') || 0) < this.opts.indentWidth) {\n                return this.placeholderEl.show();\n            } else {\n                return this.placeholderEl.hide();\n            }\n        };\n        Simditor.prototype.setValue = function (val) {\n            this.hidePopover();\n            this.editable.setValue(val);\n            return this.trigger('valuechanged');\n        };\n        Simditor.prototype.getValue = function () {\n            return this.editable.getValue();\n        };\n        Simditor.prototype.focus = function () {\n            return this.editable.focus();\n        };\n        Simditor.prototype.blur = function () {\n            return this.editable.blur();\n        };\n        Simditor.prototype.hidePopover = function () {\n            return this.el.find('.simditor-popover').each(function (i, popover) {\n                popover = $(popover).data('popover');\n                if (popover.active) {\n                    return popover.hide();\n                }\n            });\n        };\n        Simditor.prototype.destroy = function () {\n            this.triggerHandler('destroy');\n            this.textarea.closest('form').off('.simditor .simditor-' + this.id);\n            this.selection.clear();\n            this.inputManager.focused = false;\n            this.textarea.insertBefore(this.el).hide().val('').removeData('simditor');\n            this.el.remove();\n            $(document).off('.simditor-' + this.id);\n            $(window).off('.simditor-' + this.id);\n            return this.off();\n        };\n        Simditor.Toolbar = Toolbar;\n        Simditor.i18n = i18n;\n        return Simditor;\n    });\n    function __isEmptyObject(obj) {\n        var attr;\n        for (attr in obj)\n            return !1;\n        return !0;\n    }\n    function __isValidToReturn(obj) {\n        return typeof obj != 'object' || Array.isArray(obj) || !__isEmptyObject(obj);\n    }\n    if (__isValidToReturn(module.exports))\n        return module.exports;\n    else if (__isValidToReturn(exports))\n        return exports;\n});"]}